#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use dynosaur::dynosaur;

trait MyTrait {
    async fn foo(&self);
}
mod _dynosaur_macro_dynmytrait {
    use super::*;
    trait ErasedMyTrait {
        fn foo<'life0, 'dynosaur>(&'life0 self)
        ->
            ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> +
            'dynosaur>>
        where
        'life0: 'dynosaur,
        Self: 'dynosaur;
    }
    impl<DYNOSAUR: MyTrait> ErasedMyTrait for DYNOSAUR {
        fn foo<'life0, 'dynosaur>(&'life0 self)
            ->
                ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ()> +
                'dynosaur>> where 'life0: 'dynosaur, Self: 'dynosaur {
            Box::pin(<Self as MyTrait>::foo(self))
        }
    }
    #[repr(transparent)]
    pub struct DynMyTrait<'dynosaur_struct> {
        ptr: dyn ErasedMyTrait + 'dynosaur_struct,
    }
    impl<'dynosaur_struct> MyTrait for DynMyTrait<'dynosaur_struct> {
        fn foo(&self) -> impl ::core::future::Future<Output = ()> {
            let fut:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    ()> + '_>> = self.ptr.foo();
            let fut:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    ()> + 'static>> = unsafe { ::core::mem::transmute(fut) };
            fut
        }
    }
    impl<'dynosaur_struct> DynMyTrait<'dynosaur_struct> {
        pub fn boxed(value: impl MyTrait + 'dynosaur_struct)
            -> Box<DynMyTrait<'dynosaur_struct>> {
            let value = Box::new(value);
            let value: Box<dyn ErasedMyTrait + 'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn from_ref(value: &(impl MyTrait + 'dynosaur_struct))
            -> &DynMyTrait<'dynosaur_struct> {
            let value: &(dyn ErasedMyTrait + 'dynosaur_struct) = &*value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn from_mut(value: &mut (impl MyTrait + 'dynosaur_struct))
            -> &mut DynMyTrait<'dynosaur_struct> {
            let value: &mut (dyn ErasedMyTrait + 'dynosaur_struct) =
                &mut *value;
            unsafe { ::core::mem::transmute(value) }
        }
    }
}
use _dynosaur_macro_dynmytrait::DynMyTrait;

fn main() {}
